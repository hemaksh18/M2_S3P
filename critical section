#include <chrono>
#include <iostream>
#include <cstdlib>
#include <omp.h>
#include <time.h>

using namespace std::chrono;
using namespace std;

void randomVector(int vector[], int size) {
    #pragma omp parallel for default(none) private(size)
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

int main() {
    unsigned long size = 100000000;
    int *v1, *v2, *v3;

    srand(time(0));

    auto start = high_resolution_clock::now();

    v1 = (int *)malloc(size * sizeof(int));
    v2 = (int *)malloc(size * sizeof(int));
    v3 = (int *)malloc(size * sizeof(int));

    randomVector(v1, size);
    randomVector(v2, size);

    int total = 0; 

    int private_total = 0; 

    #pragma omp parallel for default(none) shared(v1, v2, v3, size) private(private_total)
    for (int i = 0; i < size; i++) {
        v3[i] = v1[i] + v2[i];
        private_total += v3[i]; // Increment private_total with the value of v3[i]
    }

    // Use critical section to update the total sum
    #pragma omp critical
    {
        total += private_total;
    }

    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken by function: " << duration.count() << " microseconds" << endl;

    cout << "Total sum of elements in v3: " << total << endl;

    return 0;
}
